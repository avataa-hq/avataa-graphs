from unittest.mock import Mock

import pytest


def remove_keys_from_response(data: dict, key_to_delete: str, attrs: list[str]):
    """
    Arango has a specific function -- it randomly generates "ids" that are called "keys".
    Because we generate new objects with each test -- new keys are generated, and it is hard
    to keep track of the accuracy of the result,
    so this method removes the key or other (source/target) fields that are generated by Arango,
    and checks if that value is in the result at all.
    """
    for edge in data[key_to_delete]:
        for attr in attrs:
            assert attr in edge
            del edge[attr]
    return data


def get_node_key_by_id(arango_client, mo_id: int) -> str:
    """
    This method gets key by mo_id from database, where tmo_id = 42588
    """
    tmo_id_42588_db = arango_client.db(
        name="tmoId_42588", username="root", password=""
    )
    query = f"""
        FOR doc IN main
            FILTER doc.data.id == {mo_id}
            RETURN doc._key
    """
    data = tmo_id_42588_db.aql.execute(query=query)
    node_key = str([i for i in data][0])
    return node_key


@pytest.fixture(scope="function")
def create_default_graph(client):
    req = {"tmo_id": 42588, "name": "first_graph"}
    res = client.post(url="/api/graph/v1/initialisation/", json=req)
    assert res.status_code == 202


def update_default_graph(client, graph_key):
    req = {"start_from_tmo_id": 42589, "trace_tmo_id": 42622}
    res = client.patch(url=f"/api/graph/v1/tmo/{graph_key}", json=req)
    assert res.status_code == 200


@pytest.fixture(scope="function")
def build_default_graph(client):
    # get graph key. it generates randomly
    graphs = client.get(url="/api/graph/v1/initialisation/")
    graph_key = graphs.json()[0]["key"]

    # by default, it equals 'New'
    graph_status = graphs.json()[0]["status"]
    assert graph_status == "New"

    # SECOND.update graph,
    # by adding "start_from_tmo_id" and "trace_tmo_id" attribute
    update_default_graph(client=client, graph_key=graph_key)

    # THIRD.build graph
    # because we create Process(task) -- we need mock endpoint, which creates process by instantly
    # run code, which build graph. without creating process
    from services.instances import run_building_in_new_process

    def new_build_graph_in_new_process(key):
        run_building_in_new_process(key=key)

    # it doesn't use, but we change it in memory by Mock
    build_graph_in_new_process = Mock(  # noqa
        side_effect=new_build_graph_in_new_process(graph_key)
    )

    res = client.post(url="/api/graph/v1/building/", params={"key": graph_key})

    assert res.status_code == 202

    # we need check if status of graph after building changed from 'New' to "Complete"
    graphs = client.get(url="/api/graph/v1/initialisation/")

    # after building, it must be changed to 'Complete'
    graph_status = graphs.json()[0]["status"]
    assert graph_status == "Complete"


def test_error_get_top_level_without_building(client, create_default_graph):
    """
    POST /api/graph/v1/analysis/top_level/

        Analysis can't be produced, while graph won't be built.
        So before get some data from "Analysis" we need build graph
    """
    graphs = client.get(url="/api/graph/v1/initialisation/")
    graph_key = graphs.json()[0]["key"]

    request_to_get_top_lvl = {"max_size": 0}

    response_from_getting_top_lvl = client.post(
        url=f"/api/graph/v1/analysis/top_level/{graph_key}",
        json=request_to_get_top_lvl,
    )
    assert response_from_getting_top_lvl.status_code == 409

    assert response_from_getting_top_lvl.json() == {
        "detail": "The status New does not allow this operation to be performed"
    }


@pytest.mark.skip(reason="Not implemented")
def test_get_top_level(client, create_default_graph, build_default_graph):
    """
    POST /api/graph/v1/analysis/top_level/{key}

        Endpoint response by getting top leve of graph. So we create graph, build it
        and getting data about him
    """
    # get graph key. it generates randomly
    graphs = client.get(url="/api/graph/v1/initialisation/")
    graph_key = graphs.json()[0]["key"]

    request = {"max_size": 0}
    server_response = client.post(
        url=f"/api/graph/v1/analysis/top_level/{graph_key}", json=request
    )
    assert server_response.status_code == 200

    expected_result = {
        "nodes": [
            {
                "key": "339",
                "grouped_by_tprm": None,
                "breadcrumbs": "/",
                "name": "Location 2",
                "label": None,
                "tmo": 42589,
                "mo_ids": [10817849],
                "data": {
                    "tmo_id": 42589,
                    "p_id": None,
                    "id": 10817849,
                    "name": "Location 2",
                    "label": None,
                    "active": True,
                    "version": 1,
                    "latitude": 1.0,
                    "longitude": 1.0,
                    "pov": None,
                    "geometry": None,
                    "model": None,
                    "point_a_id": None,
                    "point_b_id": None,
                    "status": None,
                    "params": [
                        {
                            "tprm_id": 125897,
                            "mo_id": 10817849,
                            "value": 1,
                            "id": 310602568,
                            "version": 1,
                        },
                        {
                            "tprm_id": 125898,
                            "mo_id": 10817849,
                            "value": 1,
                            "id": 310602569,
                            "version": 1,
                        },
                        {
                            "tprm_id": 125943,
                            "mo_id": 10817849,
                            "value": "Location 2",
                            "id": 310602570,
                            "version": 1,
                        },
                    ],
                },
                "connected_with": None,
            },
            {
                "key": "340",
                "grouped_by_tprm": None,
                "name": "Location 4",
                "breadcrumbs": "/",
                "label": None,
                "tmo": 42589,
                "mo_ids": [10817851],
                "data": {
                    "tmo_id": 42589,
                    "p_id": None,
                    "id": 10817851,
                    "name": "Location 4",
                    "label": None,
                    "active": True,
                    "version": 1,
                    "latitude": 3.0,
                    "longitude": 3.0,
                    "pov": None,
                    "geometry": None,
                    "model": None,
                    "point_a_id": None,
                    "point_b_id": None,
                    "status": None,
                    "params": [
                        {
                            "tprm_id": 125897,
                            "mo_id": 10817851,
                            "value": 3,
                            "id": 310602574,
                            "version": 1,
                        },
                        {
                            "tprm_id": 125898,
                            "mo_id": 10817851,
                            "value": 3,
                            "id": 310602575,
                            "version": 1,
                        },
                        {
                            "tprm_id": 125943,
                            "mo_id": 10817851,
                            "value": "Location 4",
                            "id": 310602576,
                            "version": 2,
                        },
                    ],
                },
                "connected_with": None,
            },
            {
                "key": "341",
                "grouped_by_tprm": None,
                "breadcrumbs": "/",
                "name": "Location 3",
                "label": None,
                "tmo": 42589,
                "mo_ids": [10817850],
                "data": {
                    "tmo_id": 42589,
                    "p_id": None,
                    "id": 10817850,
                    "name": "Location 3",
                    "label": None,
                    "active": True,
                    "version": 1,
                    "latitude": 2.0,
                    "longitude": 2.0,
                    "pov": None,
                    "geometry": None,
                    "model": None,
                    "point_a_id": None,
                    "point_b_id": None,
                    "status": None,
                    "params": [
                        {
                            "tprm_id": 125897,
                            "mo_id": 10817850,
                            "value": 2,
                            "id": 310602571,
                            "version": 1,
                        },
                        {
                            "tprm_id": 125898,
                            "mo_id": 10817850,
                            "value": 2,
                            "id": 310602572,
                            "version": 1,
                        },
                        {
                            "tprm_id": 125943,
                            "mo_id": 10817850,
                            "value": "Location 3",
                            "id": 310602573,
                            "version": 1,
                        },
                    ],
                },
                "connected_with": None,
            },
            {
                "key": "342",
                "grouped_by_tprm": None,
                "breadcrumbs": "/",
                "name": "Location 1",
                "label": None,
                "tmo": 42589,
                "mo_ids": [10817848],
                "data": {
                    "tmo_id": 42589,
                    "p_id": None,
                    "id": 10817848,
                    "name": "Location 1",
                    "label": None,
                    "active": True,
                    "version": 1,
                    "latitude": None,
                    "longitude": None,
                    "pov": None,
                    "geometry": None,
                    "model": None,
                    "point_a_id": None,
                    "point_b_id": None,
                    "status": None,
                    "params": [
                        {
                            "tprm_id": 125897,
                            "mo_id": 10817848,
                            "value": 0,
                            "id": 310602565,
                            "version": 1,
                        },
                        {
                            "tprm_id": 125898,
                            "mo_id": 10817848,
                            "value": 0,
                            "id": 310602566,
                            "version": 1,
                        },
                        {
                            "tprm_id": 125943,
                            "mo_id": 10817848,
                            "value": "Location 1",
                            "id": 310602567,
                            "version": 1,
                        },
                    ],
                },
                "connected_with": None,
            },
        ],
        "edges": [
            {
                "key": "694",
                "source": "339",
                "target": "342",
                "prm": None,
                "tprm": None,
                "connection_type": "point_a",
                "virtual": True,
                "source_object": None,
            },
            {
                "key": "741",
                "source": "339",
                "target": "341",
                "prm": None,
                "tprm": None,
                "connection_type": "point_a",
                "virtual": True,
                "source_object": None,
            },
            {
                "key": "788",
                "source": "340",
                "target": "341",
                "prm": None,
                "tprm": None,
                "connection_type": "point_a",
                "virtual": True,
                "source_object": None,
            },
            {
                "key": "826",
                "source": "341",
                "target": "339",
                "prm": None,
                "tprm": None,
                "connection_type": "point_a",
                "virtual": True,
                "source_object": None,
            },
            {
                "key": "903",
                "source": "341",
                "target": "340",
                "prm": None,
                "tprm": None,
                "connection_type": "point_a",
                "virtual": True,
                "source_object": None,
            },
            {
                "key": "647",
                "source": "342",
                "target": "339",
                "prm": None,
                "tprm": None,
                "connection_type": "point_a",
                "virtual": True,
                "source_object": None,
            },
        ],
        "tmo": [
            {
                "name": "Location Small",
                "geometry_type": None,
                "tmo_id": 42589,
                "icon": "LocationOn",
                "line_type": None,
            }
        ],
        "commutation": None,
        "size": 4,
    }

    # remove keys, source, target from EDGES(expected)
    formatted_expected_result = remove_keys_from_response(
        data=expected_result,
        key_to_delete="edges",
        attrs=["key", "source", "target", "source_object"],
    )
    # remove keys, source, target from EDGES(server)
    formatted_response_from_server = remove_keys_from_response(
        server_response.json(),
        key_to_delete="edges",
        attrs=["key", "source", "target", "source_object"],
    )

    # remove keys, from NODES(expected)
    expected_result = remove_keys_from_response(
        data=formatted_expected_result, key_to_delete="nodes", attrs=["key"]
    )
    # remove keys, from NODES(server)
    response_from_server = remove_keys_from_response(
        formatted_response_from_server, key_to_delete="nodes", attrs=["key"]
    )
    assert expected_result == response_from_server


@pytest.mark.skip(reason="Not implemented")
def test_analysis_expand(client, create_default_graph, build_default_graph):
    """
    POST /api/graph/v1/analysis/expand/{key}

        Endpoint expand graph`s node. So firstly we create graph, build it, get nodes from
        "top_level" endpoint for getting data about these nodes
    """
    graphs = client.get(url="/api/graph/v1/initialisation/")
    graph_key = graphs.json()[0]["key"]

    request_to_get_top_lvl = {"max_size": 0}
    response_get_to_lvl = client.post(
        url=f"/api/graph/v1/analysis/top_level/{graph_key}",
        json=request_to_get_top_lvl,
    )

    # get all nodes keys
    all_key_nodes = [
        str(node["key"]) for node in response_get_to_lvl.json()["nodes"]
    ]

    # REQUEST TO EXPAND NODE
    request_to_expand_node = {
        "node_key": all_key_nodes[0],
        "neighboring_node_keys": all_key_nodes[1:],
        "max_size": 0,
    }
    response_from_expand = client.post(
        url=f"/api/graph/v1/analysis/expand/{graph_key}",
        json=request_to_expand_node,
    )
    assert response_from_expand.status_code == 200

    expected_result = {
        "nodes": [
            {
                "key": "1207",
                "grouped_by_tprm": None,
                "breadcrumbs": "/",
                "name": "Fiber Cable 1",
                "label": None,
                "tmo": 42592,
                "mo_ids": [10817855],
                "data": {
                    "tmo_id": 42592,
                    "p_id": 10817849,
                    "id": 10817855,
                    "name": "Fiber Cable 1",
                    "label": None,
                    "active": True,
                    "version": 1,
                    "latitude": None,
                    "longitude": None,
                    "pov": None,
                    "geometry": None,
                    "model": None,
                    "point_a_id": None,
                    "point_b_id": None,
                    "status": None,
                    "params": [
                        {
                            "tprm_id": 125911,
                            "mo_id": 10817855,
                            "value": "Fiber Cable 1",
                            "id": 310602580,
                            "version": 1,
                        }
                    ],
                },
                "connected_with": None,
            },
            {
                "key": "1187",
                "grouped_by_tprm": None,
                "breadcrumbs": "/",
                "name": "Microwave 2",
                "label": None,
                "tmo": 42591,
                "mo_ids": [10817854],
                "data": {
                    "tmo_id": 42591,
                    "p_id": 10817849,
                    "id": 10817854,
                    "name": "Microwave 2",
                    "label": None,
                    "active": True,
                    "version": 1,
                    "latitude": None,
                    "longitude": None,
                    "pov": None,
                    "geometry": None,
                    "model": None,
                    "point_a_id": None,
                    "point_b_id": None,
                    "status": None,
                    "params": [
                        {
                            "tprm_id": 125912,
                            "mo_id": 10817854,
                            "value": "Microwave 2",
                            "id": 310602579,
                            "version": 1,
                        }
                    ],
                },
                "connected_with": None,
            },
        ],
        "edges": [
            {
                "key": "1528",
                "source": "1187",
                "target": "1182",
                "prm": None,
                "tprm": None,
                "connection_type": "point_a",
                "virtual": True,
                "source_object": None,
            },
            {
                "key": "1575",
                "source": "1207",
                "target": "1181",
                "prm": None,
                "tprm": None,
                "connection_type": "point_a",
                "virtual": True,
                "source_object": None,
            },
            {
                "key": "1486",
                "source": "1182",
                "target": "1187",
                "prm": None,
                "tprm": None,
                "connection_type": "point_a",
                "virtual": True,
                "source_object": None,
            },
            {
                "key": "1665",
                "source": "1181",
                "target": "1207",
                "prm": None,
                "tprm": None,
                "connection_type": "point_a",
                "virtual": True,
                "source_object": None,
            },
        ],
        "tmo": [
            {
                "name": "Microwave Small",
                "geometry_type": None,
                "tmo_id": 42591,
                "icon": "Waves",
                "line_type": None,
            },
            {
                "name": "Fiber Cable Small",
                "geometry_type": None,
                "tmo_id": 42592,
                "icon": "FiberSmartRecord",
                "line_type": None,
            },
        ],
        "commutation": None,
        "size": 2,
    }

    # remove keys, source, target from EDGES(expected)
    formatted_expected_result = remove_keys_from_response(
        data=expected_result,
        key_to_delete="edges",
        attrs=["key", "source", "target", "source_object"],
    )
    # remove keys, source, target from EDGES(server)
    formatted_response_from_server = remove_keys_from_response(
        response_from_expand.json(),
        key_to_delete="edges",
        attrs=["key", "source", "target", "source_object"],
    )

    # remove keys, from NODES(expected)
    expected_result = remove_keys_from_response(
        data=formatted_expected_result,
        key_to_delete="nodes",
        attrs=["key", "breadcrumbs"],
    )
    # remove keys, from NODES(server)
    response_from_server = remove_keys_from_response(
        formatted_response_from_server,
        key_to_delete="nodes",
        attrs=["key", "breadcrumbs"],
    )

    assert expected_result == response_from_server


@pytest.mark.skip(reason="Not implemented")
def test_analysis_collapse(
    client, arango_client, create_default_graph, build_default_graph
):
    """
    POST /api/graph/v1/analysis/collapse/{key}

        Endpoint collapse node from some gathered to one item.
        So we need create graph, build it and get some node, which we want to collapse
    """
    graphs = client.get(url="/api/graph/v1/initialisation/")
    graph_key = graphs.json()[0]["key"]

    # REQUEST TO COLLAPSE NODE
    request_to_collapse_node = {
        "node_key": get_node_key_by_id(
            arango_client=arango_client, mo_id=10818187
        )
    }
    response_from_collapse = client.post(
        url=f"/api/graph/v1/analysis/collapse/{graph_key}",
        json=request_to_collapse_node,
    )
    assert response_from_collapse.status_code == 200

    expected_result = {
        "collapse_from": [
            {
                "key": "356",
                "grouped_by_tprm": None,
                "breadcrumbs": "/",
                "name": "Microwave 1-Port 2",
                "label": None,
                "tmo": 42610,
                "mo_ids": [10818187],
                "data": {
                    "tmo_id": 42610,
                    "p_id": 10817853,
                    "id": 10818187,
                    "name": "Microwave 1-Port 2",
                    "label": None,
                    "active": True,
                    "version": 2,
                    "latitude": None,
                    "longitude": None,
                    "pov": None,
                    "geometry": None,
                    "model": None,
                    "point_a_id": 10818188,
                    "point_b_id": None,
                    "status": None,
                    "params": [
                        {
                            "tprm_id": 125933,
                            "mo_id": 10818187,
                            "value": "Port 2",
                            "id": 310614064,
                            "version": 1,
                        },
                        {
                            "tprm_id": 125953,
                            "mo_id": 10818187,
                            "value": "4G-123",
                            "id": 310625555,
                            "version": 1,
                        },
                    ],
                },
                "connected_with": None,
            },
            {
                "key": "355",
                "grouped_by_tprm": None,
                "breadcrumbs": "/",
                "name": "Microwave 1-Port 1",
                "label": None,
                "tmo": 42610,
                "mo_ids": [11001167],
                "data": {
                    "tmo_id": 42610,
                    "p_id": 10817853,
                    "id": 11001167,
                    "name": "Microwave 1-Port 1",
                    "label": None,
                    "active": True,
                    "version": 1,
                    "latitude": None,
                    "longitude": None,
                    "pov": None,
                    "geometry": None,
                    "model": None,
                    "point_a_id": None,
                    "point_b_id": None,
                    "status": None,
                    "params": [
                        {
                            "tprm_id": 125933,
                            "mo_id": 11001167,
                            "value": "Port 1",
                            "id": 313898777,
                            "version": 1,
                        }
                    ],
                },
                "connected_with": None,
            },
        ],
        "collapse_to": {
            "key": "343",
            "grouped_by_tprm": None,
            "breadcrumbs": "/",
            "name": "Microwave 1",
            "label": None,
            "tmo": 42591,
            "mo_ids": [10817853],
            "data": {
                "tmo_id": 42591,
                "p_id": 10817848,
                "id": 10817853,
                "name": "Microwave 1",
                "label": None,
                "active": True,
                "version": 2,
                "latitude": None,
                "longitude": None,
                "pov": None,
                "geometry": None,
                "model": None,
                "point_a_id": None,
                "point_b_id": None,
                "status": None,
                "params": [
                    {
                        "tprm_id": 125912,
                        "mo_id": 10817853,
                        "value": "Microwave 1",
                        "id": 310602578,
                        "version": 1,
                    }
                ],
            },
            "connected_with": None,
        },
        "tmo": [
            {
                "name": "Microwave Small",
                "geometry_type": None,
                "tmo_id": 42591,
                "icon": "Waves",
                "line_type": None,
            }
        ],
    }

    # because of response format: "collapse_from" has list of values, so we need to delete 'key' from every
    # item in it
    # but "collapse_to" has just dict, so we can`t delete it by default "remove_keys_from_response" method
    # and delete it by python method "del" below
    expected_result = remove_keys_from_response(
        data=expected_result,
        key_to_delete="collapse_from",
        attrs=["key", "breadcrumbs"],
    )
    response_from_server = remove_keys_from_response(
        response_from_collapse.json(),
        key_to_delete="collapse_from",
        attrs=["key", "breadcrumbs"],
    )

    del expected_result["collapse_to"]["key"]
    del expected_result["collapse_to"]["breadcrumbs"]
    del response_from_server["collapse_to"]["key"]
    del response_from_server["collapse_to"]["breadcrumbs"]

    assert response_from_server == expected_result


@pytest.mark.skip(reason="Not implemented")
def test_error_analysis_collapse_parent_wasnt_found(
    client, arango_client, create_default_graph, build_default_graph
):
    """
    POST /api/graph/v1/analysis/collapse/{key}

        Endpoint collapse node from some gathered to one item.
        So we need create graph, build it and get some node, which we want to collapse

        But node, which we want to collapse must has parent
    """
    graphs = client.get(url="/api/graph/v1/initialisation/")
    graph_key = graphs.json()[0]["key"]

    req = {
        "node_key": get_node_key_by_id(
            arango_client=arango_client, mo_id=10817849
        )
    }

    res = client.post(
        url=f"/api/graph/v1/analysis/collapse/{graph_key}", json=req
    )
    assert res.status_code == 404
    assert res.json() == {"detail": "Parent node not found"}


@pytest.mark.skip(reason="Not implemented")
def test_analysis_expand_edge(
    client, arango_client, create_default_graph, build_default_graph
):
    """
    POST /api/graph/v1/analysis/expand_edge/{key}

        Endpoint expanding edge. So we need create graph, build it and get nodes, between which
        we want to get node
    """
    graphs = client.get(url="/api/graph/v1/initialisation/")
    graph_key = graphs.json()[0]["key"]

    req = {
        "node_key_a": get_node_key_by_id(
            arango_client=arango_client, mo_id=10840278
        ),
        "node_key_b": get_node_key_by_id(
            arango_client=arango_client, mo_id=10818360
        ),
    }

    # REQUEST TO EXPAND EDGE
    server_response = client.post(
        url=f"/api/graph/v1/analysis/expand_edge/{graph_key}", json=req
    )
    assert server_response.status_code == 200

    expected_result = {
        "nodes": [],
        "edges": [
            {
                "key": "2262",
                "source": "2112",
                "target": "2125",
                "prm": [311136049],
                "tprm": 125952,
                "connection_type": "mo_link",
                "virtual": False,
                "source_object": None,
            }
        ],
        "tmo": [],
        "tprm": [
            {
                "name": "Trace",
                "val_type": "mo_link",
                "tmo_id": 42604,
                "id": 125952,
            }
        ],
    }

    # remove keys, source, target from EDGES(expected)
    expected_result = remove_keys_from_response(
        data=expected_result,
        key_to_delete="edges",
        attrs=["key", "source", "target", "source_object"],
    )
    # remove keys, source, target from EDGES(server)
    result_from_server = remove_keys_from_response(
        server_response.json(),
        key_to_delete="edges",
        attrs=["key", "source", "target", "source_object"],
    )

    assert expected_result == result_from_server


@pytest.mark.skip(reason="Not implemented")
def test_error_analysis_expand_edge_nodes_not_in_db(
    client, arango_client, create_default_graph, build_default_graph
):
    """
    POST /api/graph/v1/analysis/expand_edge/{key}

        Endpoint expanding edge.
        So we need create graph, build it and get nodes, between which we want to get node

        And if we add node, which not existed -- we need to get error
    """
    graphs = client.get(url="/api/graph/v1/initialisation/")
    graph_key = graphs.json()[0]["key"]

    request_with_existed_node_key_a = {
        "node_key_a": get_node_key_by_id(
            arango_client=arango_client, mo_id=10840278
        ),
        "node_key_b": "0000",
    }
    response_with_existed_node_key_a = client.post(
        url=f"/api/graph/v1/analysis/expand_edge/{graph_key}",
        json=request_with_existed_node_key_a,
    )
    assert response_with_existed_node_key_a.status_code == 404
    assert response_with_existed_node_key_a.json() == {
        "detail": "Nodes not found in database"
    }

    request_with_existed_node_key_b = {
        "node_key_a": "0000",
        "node_key_b": get_node_key_by_id(
            arango_client=arango_client, mo_id=10818360
        ),
    }
    response_with_existed_node_key_b = client.post(
        url=f"/api/graph/v1/analysis/expand_edge/{graph_key}",
        json=request_with_existed_node_key_b,
    )
    assert response_with_existed_node_key_b.status_code == 404
    assert response_with_existed_node_key_b.json() == {
        "detail": "Nodes not found in database"
    }


@pytest.mark.skip(reason="Not implemented")
def test_analysis_neighbors_with_n_1(
    client, arango_client, create_default_graph, build_default_graph
):
    """
    POST /api/graph/v1/analysis/neighbors/{key}

        Endpoint gets neighbors by node and quantity of his neighbors
        So we need create graph, build it
        In this test we get quantity of his neighbors equals 1
    """
    graphs = client.get(url="/api/graph/v1/initialisation/")
    graph_key = graphs.json()[0]["key"]

    request_to_get_neighbors = {
        "node_key": get_node_key_by_id(
            arango_client=arango_client, mo_id=10817849
        ),
        "n": 1,
    }
    server_response = client.post(
        url=f"/api/graph/v1/analysis/neighbors/{graph_key}",
        json=request_to_get_neighbors,
    )
    assert server_response.status_code == 200

    expected_result = {
        "nodes": [
            {
                "key": "2875",
                "grouped_by_tprm": None,
                "breadcrumbs": "/",
                "name": "Location 1",
                "label": None,
                "tmo": 42589,
                "mo_ids": [10817848],
                "data": {
                    "tmo_id": 42589,
                    "p_id": None,
                    "id": 10817848,
                    "name": "Location 1",
                    "label": None,
                    "active": True,
                    "version": 1,
                    "latitude": None,
                    "longitude": None,
                    "pov": None,
                    "geometry": None,
                    "model": None,
                    "point_a_id": None,
                    "point_b_id": None,
                    "status": None,
                    "params": [
                        {
                            "tprm_id": 125897,
                            "mo_id": 10817848,
                            "value": 0,
                            "id": 310602565,
                            "version": 1,
                        },
                        {
                            "tprm_id": 125898,
                            "mo_id": 10817848,
                            "value": 0,
                            "id": 310602566,
                            "version": 1,
                        },
                        {
                            "tprm_id": 125943,
                            "mo_id": 10817848,
                            "value": "Location 1",
                            "id": 310602567,
                            "version": 1,
                        },
                    ],
                },
                "connected_with": None,
            },
            {
                "key": "2874",
                "grouped_by_tprm": None,
                "breadcrumbs": "/",
                "name": "Location 3",
                "label": None,
                "tmo": 42589,
                "mo_ids": [10817850],
                "data": {
                    "tmo_id": 42589,
                    "p_id": None,
                    "id": 10817850,
                    "name": "Location 3",
                    "label": None,
                    "active": True,
                    "version": 1,
                    "latitude": 2.0,
                    "longitude": 2.0,
                    "pov": None,
                    "geometry": None,
                    "model": None,
                    "point_a_id": None,
                    "point_b_id": None,
                    "status": None,
                    "params": [
                        {
                            "tprm_id": 125897,
                            "mo_id": 10817850,
                            "value": 2,
                            "id": 310602571,
                            "version": 1,
                        },
                        {
                            "tprm_id": 125898,
                            "mo_id": 10817850,
                            "value": 2,
                            "id": 310602572,
                            "version": 1,
                        },
                        {
                            "tprm_id": 125943,
                            "mo_id": 10817850,
                            "value": "Location 3",
                            "id": 310602573,
                            "version": 1,
                        },
                    ],
                },
                "connected_with": None,
            },
        ],
        "edges": [
            {
                "key": "3227",
                "source": "2872",
                "target": "2875",
                "prm": None,
                "tprm": None,
                "connection_type": "point_a",
                "virtual": True,
                "source_object": None,
            },
            {
                "key": "3274",
                "source": "2872",
                "target": "2874",
                "prm": None,
                "tprm": None,
                "connection_type": "point_a",
                "virtual": True,
                "source_object": None,
            },
        ],
        "tmo": [
            {
                "name": "Location Small",
                "geometry_type": None,
                "tmo_id": 42589,
                "icon": "LocationOn",
                "line_type": None,
            }
        ],
        "commutation": None,
        "size": 2,
    }

    # remove keys from NODES(expected)
    formatted_expected_result = remove_keys_from_response(
        data=expected_result, key_to_delete="nodes", attrs=["key"]
    )
    # remove keys from NODES(server)
    formatted_response_from_server = remove_keys_from_response(
        server_response.json(), key_to_delete="nodes", attrs=["key"]
    )

    # remove keys, source, target from EDGES(expected)
    expected_result = remove_keys_from_response(
        data=formatted_expected_result,
        key_to_delete="edges",
        attrs=["key", "source", "target", "source_object"],
    )
    # remove keys, source, target from EDGES(server)
    response_from_server = remove_keys_from_response(
        formatted_response_from_server,
        key_to_delete="edges",
        attrs=["key", "source", "target", "source_object"],
    )

    assert expected_result == response_from_server


@pytest.mark.skip(reason="Not implemented")
def test_analysis_neighbors_with_n_3(
    client, arango_client, create_default_graph, build_default_graph
):
    """
    POST /api/graph/v1/analysis/neighbors/{key}

        Endpoint gets neighbors by node and quantity of his neighbors
        So we need create graph, build it
        In this test we get quantity of his neighbors equals 3
    """
    graphs = client.get(url="/api/graph/v1/initialisation/")
    graph_key = graphs.json()[0]["key"]

    request_to_get_neighbors = {
        "node_key": get_node_key_by_id(
            arango_client=arango_client, mo_id=10817849
        ),
        "n": 3,
    }
    response_from_getting_neighbors = client.post(
        url=f"/api/graph/v1/analysis/neighbors/{graph_key}",
        json=request_to_get_neighbors,
    )

    assert response_from_getting_neighbors.status_code == 200
    expected_result = {
        "nodes": [
            {
                "key": "363",
                "grouped_by_tprm": None,
                "name": "Location 1",
                "label": None,
                "tmo": 42589,
                "mo_ids": [10817848],
                "data": {
                    "tmo_id": 42589,
                    "p_id": None,
                    "id": 10817848,
                    "name": "Location 1",
                    "label": None,
                    "active": True,
                    "version": 1,
                    "latitude": None,
                    "longitude": None,
                    "pov": None,
                    "geometry": None,
                    "model": None,
                    "point_a_id": None,
                    "point_b_id": None,
                    "status": None,
                    "params": [
                        {
                            "tprm_id": 125897,
                            "mo_id": 10817848,
                            "value": 0,
                            "id": 310602565,
                            "version": 1,
                        },
                        {
                            "tprm_id": 125898,
                            "mo_id": 10817848,
                            "value": 0,
                            "id": 310602566,
                            "version": 1,
                        },
                        {
                            "tprm_id": 125943,
                            "mo_id": 10817848,
                            "value": "Location 1",
                            "id": 310602567,
                            "version": 1,
                        },
                    ],
                },
                "breadcrumbs": "/",
                "connected_with": None,
            },
            {
                "key": "362",
                "grouped_by_tprm": None,
                "name": "Location 3",
                "label": None,
                "tmo": 42589,
                "mo_ids": [10817850],
                "data": {
                    "tmo_id": 42589,
                    "p_id": None,
                    "id": 10817850,
                    "name": "Location 3",
                    "label": None,
                    "active": True,
                    "version": 1,
                    "latitude": 2.0,
                    "longitude": 2.0,
                    "pov": None,
                    "geometry": None,
                    "model": None,
                    "point_a_id": None,
                    "point_b_id": None,
                    "status": None,
                    "params": [
                        {
                            "tprm_id": 125897,
                            "mo_id": 10817850,
                            "value": 2,
                            "id": 310602571,
                            "version": 1,
                        },
                        {
                            "tprm_id": 125898,
                            "mo_id": 10817850,
                            "value": 2,
                            "id": 310602572,
                            "version": 1,
                        },
                        {
                            "tprm_id": 125943,
                            "mo_id": 10817850,
                            "value": "Location 3",
                            "id": 310602573,
                            "version": 1,
                        },
                    ],
                },
                "breadcrumbs": "/",
                "connected_with": None,
            },
            {
                "key": "361",
                "grouped_by_tprm": None,
                "name": "Location 4",
                "label": None,
                "tmo": 42589,
                "mo_ids": [10817851],
                "data": {
                    "tmo_id": 42589,
                    "p_id": None,
                    "id": 10817851,
                    "name": "Location 4",
                    "label": None,
                    "active": True,
                    "version": 1,
                    "latitude": 3.0,
                    "longitude": 3.0,
                    "pov": None,
                    "geometry": None,
                    "model": None,
                    "point_a_id": None,
                    "point_b_id": None,
                    "status": None,
                    "params": [
                        {
                            "tprm_id": 125897,
                            "mo_id": 10817851,
                            "value": 3,
                            "id": 310602574,
                            "version": 1,
                        },
                        {
                            "tprm_id": 125898,
                            "mo_id": 10817851,
                            "value": 3,
                            "id": 310602575,
                            "version": 1,
                        },
                        {
                            "tprm_id": 125943,
                            "mo_id": 10817851,
                            "value": "Location 4",
                            "id": 310602576,
                            "version": 2,
                        },
                    ],
                },
                "breadcrumbs": "/",
                "connected_with": None,
            },
        ],
        "edges": [
            {
                "key": "855",
                "source": "360",
                "target": "363",
                "prm": None,
                "tprm": None,
                "connection_type": "point_a",
                "virtual": True,
                "source_object": "385",
            },
            {
                "key": "906",
                "source": "360",
                "target": "362",
                "prm": None,
                "tprm": None,
                "connection_type": "point_a",
                "virtual": True,
                "source_object": "407",
            },
            {
                "key": "708",
                "source": "470",
                "target": "489",
                "prm": [311123471],
                "tprm": 125952,
                "connection_type": "mo_link",
                "virtual": False,
                "source_object": "470",
            },
            {
                "key": "709",
                "source": "471",
                "target": "489",
                "prm": [311136049],
                "tprm": 125952,
                "connection_type": "mo_link",
                "virtual": False,
                "source_object": "471",
            },
            {
                "key": "970",
                "source": "361",
                "target": "489",
                "prm": [310625560],
                "tprm": 125956,
                "connection_type": "mo_link",
                "virtual": True,
                "source_object": "427",
            },
        ],
        "tmo": [
            {
                "name": "Location Small",
                "geometry_type": None,
                "tmo_id": 42589,
                "icon": "LocationOn",
                "line_type": None,
            }
        ],
        "commutation": None,
        "size": 3,
    }

    # remove keys from NODES(expected)
    formatted_expected_result = remove_keys_from_response(
        data=expected_result, key_to_delete="nodes", attrs=["key"]
    )
    # remove keys from NODES(server)
    formatted_response_from_server = remove_keys_from_response(
        response_from_getting_neighbors.json(),
        key_to_delete="nodes",
        attrs=["key"],
    )
    # remove keys, source, targets from EDGES(expected)
    expected_result = remove_keys_from_response(
        data=formatted_expected_result,
        key_to_delete="edges",
        attrs=["key", "source", "target", "source_object"],
    )
    # remove keys, source, targets from EDGES(server)
    response_from_server = remove_keys_from_response(
        formatted_response_from_server,
        key_to_delete="edges",
        attrs=["key", "source", "target", "source_object"],
    )
    assert expected_result == response_from_server


@pytest.mark.skip(reason="Not implemented")
def test_error_analysis_neighbors_node_dont_in_database(
    client, arango_client, create_default_graph, build_default_graph
):
    """
    POST /api/graph/v1/analysis/neighbors/{key}

        Endpoint gets neighbors by node and quantity of his neighbors
        So we need create graph, build it
        But if this node doesn't exist
    """
    graphs = client.get(url="/api/graph/v1/initialisation/")
    graph_key = graphs.json()[0]["key"]

    request_to_get_neighbors = {"node_key": "0000", "n": 3}
    response_from_server = client.post(
        url=f"/api/graph/v1/analysis/neighbors/{graph_key}",
        json=request_to_get_neighbors,
    )
    assert response_from_server.status_code == 404
    assert response_from_server.json() == {
        "detail": "Nodes not found in database"
    }
